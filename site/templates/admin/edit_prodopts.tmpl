<:wrap admin/xbase.tmpl title=>"[articleType] Options", showtitle=>1, menuitem=>prodopts:>
<:ifMessage:><div id="message"><:message:></div><:or:><:eif:>
<:include admin/product_menu.tmpl:>

<:if Dboptions:>
<h2>Product options</h2>
<div id="prodoptmenu"></div>
<div id="productoptions">
<:iterator begin dboptions:>
<div id="prodopt<:dboption id:>" class="prodopt">
<div id="prodoptmenu<:dboption id:>" class="prodoptmenu">Option: <span id="prodoptname<:dboption id:>"><:dboption name:></span> <a href="<:script:>?id=<:article id:>&amp;a_edit_option=1&amp;option_id=<:dboption id:>">Edit</a> <a href="<:script:>?id=<:article id:>&amp;a_delconf_option=1&amp;option_id=<:dboption id:>">Delete</a> <:dboption_move:></div>
<:if Dboptionvalues:>
<ul id="vallist<:dboption id:>" class="prodoptvalues">
<:iterator begin dboptionvalues:>
<li id="valentry<:dboptionvalue id:>"><:dboptionvalue value:> <:ifEq [dboptionvalue id] [dboption default_value]:>(default)<:or:><:eif:> <a href="<:script:>?id=<:product id:>&amp;value_id=<:dboptionvalue id:>&amp;a_edit_option_value=1">Edit</a> <a href="<:script:>?id=<:product id:>&amp;value_id=<:dboptionvalue id:>&amp;a_confdel_option_value=1">Delete</a> <:dboptionvalue_move:></li>
<:iterator end dboptionvalues:>
</ul>  
<form action="<:script:>" method="post" id="valform<:dboption id:>" /><input type="hidden" name="id" value="<:article id:>" /><input type="hidden" name="option_id" value="<:dboption id:>" /><input type="hidden" name="_t" value="prodopts" /><:csrfp admin_add_option_value hidden:><input type="text" name="value" /><input type="submit" name="a_add_option_value" value="Add Value" /></form>
<:or Dboptionvalues:><:eif Dboptionvalues:>
</div>
<:iterator end dboptions:>
</div>
<:or Dboptions:><:eif Dboptions:>
<div id="addoptionform">
<form action="<:script:>" method="post">
<:csrfp admin_add_option hidden:>
<input type="hidden" name="_t" value="prodopts" />
<input type="hidden" name="id" value="<:article id:>" />
<table>
  <tr>
    <th>Name</th>
    <td><input type="text" name="name" value="<:old name:>" size="40" maxlength="40" /><:error_img name:></td>
  </tr>
  <tr>
    <th>Values</th>
    <td><input type="text" name="value1" value="<:old value1:>" size="40" maxlength="40" /><:error_img value1:><br />
<input type="text" name="value2" value="<:old value2:>" size="40" maxlength="40" /><:error_img value2:><br />
<input type="text" name="value3" value="<:old value3:>" size="40" maxlength="40" /><:error_img value3:><br />
<input type="text" name="value4" value="<:old value4:>" size="40" maxlength="40" /><:error_img value4:><br />
<input type="text" name="value5" value="<:old value5:>" size="40" maxlength="40" /><:error_img value5:><br /></td>
  </tr>
  <tr>
    <td colspan="2"><input type="submit" name="a_add_option" value="Add New Option" /></td>
  </tr>
</table>
</form>
</div>
<div id="addoptionbutton" style="display: none">
<a href="#" onclick="javascript: document.getElementById('addoptionform').style.display='block'; return false;">Add an option</a>
</div>
<:ifDboptions:>
<script>

// this really all belongs in a separate file

$('addoptionform').style.display='none';
$('addoptionbutton').style.display='block';
var prodopts = <:dboptionsjson:>;
var prodopts_by_id = new Object;
var reorder_values_csrf = '<:csrfp admin_move_option_value:>';
var reorder_options_csrf = '<:csrfp admin_move_option:>';
var menu = $('prodoptmenu');
if (menu) {
  menu.appendChild(document.createTextNode("All Options: | "));
  var sort_a = document.createElement("a");
  sort_a.href = "javascript:sort_prodopts()";
  sort_a.title = "Sort product options alphabetically";
  sort_a.appendChild(document.createTextNode("Sort"));
  menu.appendChild(sort_a);
  menu.appendChild(document.createTextNode(" |"));
}
for (var i = 0; i < prodopts.length; ++i) {
  var opt = prodopts[i];
  prodopts_by_id[opt.id] = opt;
  var opt_ele_id = 'prodoptmenu' + opt.id;
  var opt_ele = $(opt_ele_id);
  opt_ele.appendChild(document.createTextNode(" "));
  var sort_a = document.createElement("a");
  sort_a.href = "javascript:sort_prodopt_values('" + opt.id + "')";
  sort_a.title = "Sort values alphabetically";
  sort_a.appendChild(document.createTextNode("Sort"));
  opt_ele.appendChild(sort_a);
  for (var j = 0; j < opt.values.length; ++j) {
    var val = opt.values[j];
    var s = $('optval' + val.id);
    var p = $('valentry' + val.id);
    var f = $('editval' + val.id);

    if (s && f && p) {
      s.style.display = 'inline';
      f.style.display = 'none';
      var a = document.createElement("a");
      a.onclick = make_edit_handler(f, a, s);
      a.href="#";
      var atext = document.createTextNode("Edit");
      a.appendChild(atext);
      p.appendChild(document.createTextNode(" "));
      p.appendChild(a);
    }
  }
}

function reorder_option_values(id, order) {
  var parent = $("vallist"+id);
  var nodes = new Array;
  var nodes_by_id = new Object;
  for (var i = 0; i < parent.childNodes.length; ++i) {
    var n = parent.childNodes[i];
    if (n.id) {
      var m = n.id.match(/^valentry(\d+)$/);
      if (m) {
        nodes_by_id[m[1]] = n;
        nodes.push(n);
      }
    }
  }
  // remove our value nodes
  for (var i = 0; i < nodes; ++i) {
    parent.removeChild(nodes[i]);
  }
  // put them back in, in the new order
  for (var i = 0; i < order.length; ++i) {
    var n = nodes_by_id[order[i]];
    if (n)
      parent.appendChild(n);
  }

  // TODO: reorder the values in prodopts
}

function reorder_options(order) {
  var parent = $("productoptions");
  var nodes = new Array;
  var nodes_by_id = new Object;
  for (var i = 0; i < parent.childNodes.length; ++i) {
    var n = parent.childNodes[i];
    if (n.id) {
      var m = n.id.match(/^prodopt(\d+)$/);
      if (m) {
        nodes_by_id[m[1]] = n;
        nodes.push(n);
      }
    }
  }
  // remove our value nodes
  for (var i = 0; i < nodes; ++i) {
    parent.removeChild(nodes[i]);
  }
  // put them back in, in the new order
  for (var i = 0; i < order.length; ++i) {
    var n = nodes_by_id[order[i]];
    if (n)
      parent.appendChild(n);
  }

  // TODO: reorder the values in prodopts
}

var busy_img = $('busy_img');

function set_busy(id) {
  if (busy_img)
    busy_img.style.display = 'inline';
}
function set_not_busy(id) {
  if (busy_img)
    busy_img.style.display = 'none';
}

function sort_prodopt_values(id) {
  var opt = prodopts_by_id[id];

  var ord = new Array;
  // duplicate to sort it
  for (var i = 0; i < opt.values.length; ++i) {
    ord.push(opt.values[i]);
  }
  ord.sort(function(a, b) { 
    var va = a.value.toLowerCase();
    var vb = b.value.toLowerCase();
    if (va < vb) return -1;
    if (va > vb) return 1;
    return 0;
  });
  var ids = new Array;
  for (var i = 0; i < ord.length; ++i) {
    ids.push(ord[i].id);
  }
  set_busy();
  new Ajax.Request("<:script:>", {
    method: "post",
    parameters: {
      a_option_value_reorder: 1,
      id: "<:article id:>",
      option_id: id,
      value_ids: ids.join(","),
      _csrfp: reorder_values_csrf,
      _: 1
    },
    onSuccess: function(xport) {
      var json = xport.responseJSON;
      set_not_busy();
      if (json.success) {
        reorder_option_values(json.option.id, json.order);
      }
      else {
        alert("Error sorting: " + json.error);
      }
    },
    onFailure: function() {
      alert("Error contacting server");
      set_not_busy();
    }
    });
}

function sort_prodopts() {
  var ord = new Array;
  for (var i = 0; i < prodopts.length; ++i) {
    ord.push(prodopts[i]);
  }
  ord.sort(function(a, b) {
    var va = a.name.toLowerCase();
    var vb = b.name.toLowerCase();
    if (va < vb) return -1;
    if (va > vb) return 1;
    return 0;
    });
  var ids = new Array;
  for (var i = 0; i < ord.length; ++i) {
    ids.push(ord[i].id);
  }
  set_busy();
  new Ajax.Request("<:script:>", {
    method: "post",
    parameters: {
      a_option_reorder: 1,
      id: "<:article id:>",
      option_ids: ids.join(","),
      _csrfp: reorder_options_csrf,
      _: 1
    },
    onSuccess: function(xport) {
      var json = xport.responseJSON;
      set_not_busy();
      if (json.success) {
        reorder_options(json.order);
      }
      else {
        alert("Error sorting: " + json.error);
      }
    },
    onFailure: function() {
      alert("Error contacting server");
      set_not_busy();
    }
    });
}
</script>
<:or:><:eif:>