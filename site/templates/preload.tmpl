<:# utility definitions :>
<:-.define make_select-:>
  <:-.if !default.defined -:>
    <:-.set default = "" -:>
  <:.end if:>
  <select name="<:= name | html :>">
  <:-.for i in list -:>
    <option value="<:= i.$id | html :>"
      <:- .if i.$id eq default :> selected="selected"<:.end if -:>
    >
    <:= i.$desc | html :>
  <:-.end for-:>
  </select>
<:-.end define -:>
<:#
page_list expects:
base - base url for links
pages - the result of the bse.pages call
 :>
<:-.define page_list-:>
<:.set sep = base =~ /\?/ ? "&" : "?" -:>
<:.set base = base _ sep :>
<div class="pagelist">
Page <:= pages.page :> of <:= pages.pagecount :>
<:.if pages.previous_page -:>
<a href="<:= base |html:><:= pages.pname | uri :>=1&amp;<:= pages.ppname | uri :>=<:= pages.pp | uri :>">&lt;&lt</a>
<a href="<:= base |html:><:= pages.pname | uri :>=<:= pages.previous_page |uri:>&amp;<:= pages.ppname | uri :>=<:= pages.pp | uri :>">&lt;</a>
<:.else -:>
<span>&lt&lt</span>
<span>&lt</span>
<:.end if -:>
<:.for p in pcats.pages :>
<:.if p.link -:>
<a href="<:= base |html :><:= pages.pname | uri:>=<:= p.page | uri :>&amp;<:=pages.ppname | uri :>=<:= pages.pp | uri :>"><:= p.page |html :></a>
<:.else -:>
<span><:= p.page |html:></span>
<:.end if -:>
<:.end for:>
<:.if pages.next_page -:>
<a href="<:= base |html:><:= pages.pname | uri :>=<:= pages.next_page |uri:>&amp;<:= pages.ppname | uri :>=<:= pages.pp | uri :>">&gt;</a>
<a href="<:= base |html:><:= pages.pname | uri :>=<:= pages.pagecount |uri:>&amp;<:= pages.ppname | uri :>=<:= pages.pp | uri :>">&gt;&gt</a>
<:.else -:>
<span>&gt&gt</span>
<span>&gt</span>
<:.end if -:>
</div>
<:-.end define -:>

<:.define old -:>
<:# parameters: field, default -:>
<:  .if cgi.param(field).defined -:>
<:= cgi.param(field) -:>
<:  .else -:>
<:= default | html -:>
<:  .end if -:>
<:.end define-:>

<:.define error_img -:>
<:# parameters: field -:>
<:# this implementation should probably change -:>
<:= ("error_img " _ field).evaltag -:>
<:.end define -:>

<:.define input -:>
<:# paramaters:
  name - field name
  fields - hash of fields (may be set by page instead)
  object - source for defaults in edit mode
:>
<:  .set f = fields[name] -:>
<:  .if object -:>
<:     .set default = object.get(name) -:>
<:  .elsif f.default -:>
<:     .set default = f.default -:>
<:  .else -:>
<:     .set default = "" -:>
<:  .end if -:>
<:  .if f.htmltype eq "textarea" -:>
<textarea id="<:= name | html :>" name="<:= name | html :>" rows="<:= f.height ? f.height : cfg.entry("forms", "textarea_rows", 10) :>" cols=<:= f.width ? f.width : cfg.entry("textarea_cols", 60) | html :>>
<:-    .call "old", "field":name, "default":default -:>
</textarea>
<:  .elsif f.htmltype eq "checkbox" -:>
<:.set is_checked = request.method() eq 'post' ? cgi.param(name).defined : default -:>
<input id="<:= name | html :>" type="checkbox" name="<:= name | html :>"<:= is_checked ? ' checked="checked"' : '' :> value="<:= f.value ? f.value : 1 | html :>" />
<:  .elsif f.htmltype eq "select" -:>
<:.set values = f.select["values"] -:>
<:.set values = values.is_code ? values() : values -:>
<:.call "make_select",
    "name":name,
    "default":default,
    "list":values,
    "id":f.select.id,
    "desc":f.select.label
-:>
<:  .else -:>
<:    .if f.type and f.type eq "date" and default ne "" -:>
<:      .set default = default.replace(/(\d+)\D+(\d+)\D+(\d+)/, "$3/$2/$1") -:>
<:    .end if -:>
<input id="<:= name | html :>" type="text" name="<:= name | html :>" value="<:.call "old", "field":name, "default":default :>" 
<:-= f.maxlength ? ' maxlength="' _ f.maxlength _ '"' : '' :>
<:= f.width ? 'size="' _ f.width _ '"' : '' :> />
<:  .end if -:>
<:.end define -:>

<:.define field -:>
<:# paramaters:
  name - field name
  fields - hash of fields (may be set by page instead)
:>
<:.set f = fields[name] -:>
<div>
  <label for="<:= name | html :>"><:= f.nolabel ? "" : f.description | html :>:</label>
  <span><:.call "input", "name":name -:><:.call "error_img", "field":name :></span>
</div>
<:.end define -:>

<:.define messages -:>
<:  .if request.messages.size -:>
<div class="messages">
<:     .for m in request.messages -:>
  <div class="<:= m.class :>"><:= m.html :></div>
<:     .end for -:> 
</div>
<:  .end if -:>
<:.end define -:>

<:- include includes/custom/preload.tmpl optional -:>
